{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","i","pokemon","name","CardList","pokemonList","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","ninjas","id","searchField","_this2","fetch","then","response","json","data","setState","results","users","_this3","_this$state","filterPokemon","filter","toLowerCase","includes","search_box_component_SearchBox","e","target","value","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAIaA,eAAO,SAAAC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,QAAQC,IAAG,wBAAAC,OAA0BP,EAAMQ,EAAhC,4BACpBP,EAAAC,EAAAC,cAAA,aAAOH,EAAMS,QAAQC,KAArB,QCFKC,SAAW,SAAAX,GAAK,OAMzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVJ,EAAMY,YAAYC,IAAI,SAACJ,EAAQD,GAAT,OAAgBP,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAMP,EAAIC,QAASA,SCR3DO,SAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,aAAf,OACrBlB,EAAAC,EAAAC,cAAA,SACIC,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoEHG,cAtEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAGKI,MAAQ,CACXC,OAAO,CACL,CACErB,KAAM,cACNsB,GAAI,GAEN,CACEtB,KAAM,gBACNsB,GAAI,GAEN,CACEtB,KAAM,kBACNsB,GAAI,GAEN,CACEtB,KAAM,cACNsB,GAAI,IAGRC,YAAa,GACbrB,YAAa,IAxBHW,mFA6BM,IAAAW,EAAAR,KAElBS,MADc,yDAEbC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIL,EAAKM,SAAS,CAAC5B,YAAa2B,EAAKE,YAM/CN,MADU,8CAETC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAM,GAAK,OAAIR,EAAKM,SAAS,CAACT,OAAQW,uCAG/B,IAAAC,EAAAjB,KAAAkB,EAC6BlB,KAAKI,MAAjClB,EADDgC,EACChC,YAAaqB,EADdW,EACcX,YAKfY,EAAgBjC,EAAYkC,OAAO,SAAArC,GAAO,OAC9CA,EAAQC,KAAKqC,cAAcC,SAASf,EAAYc,iBAGlD,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAC8C,EAAD,CACE/B,YAAY,gBACZC,aAAe,SAAA+B,GAAC,OACdP,EAAKH,SAAS,CAACP,YAAaiB,EAAEC,OAAOC,WAGzCnD,EAAAC,EAAAC,cAACkD,EAAD,CAAUzC,YAAaiC,YAhEbS,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.2cf0496a.chunk.js","sourcesContent":["import React from 'react'\n\nimport './card.styles.css'\n\nexport const Card = props => (\n    <div className=\"card-container\">\n        <img alt=\"ninja\" src={`https://robohash.org/${props.i}?set=set2&size=150x150`}/>\n        <p > { props.pokemon.name } </p>  \n    </div>\n)","import React from 'react';\n\nimport { Card } from '../card/card.component' \nimport './card-list.styles.css'\n\nexport const CardList = props => (\n    // <div className='card-list'>\n    //     {props.ninjas.map(ninja => (\n    //         <Card key={ ninja.id } ninja={ninja}/> \n    //     ))}\n    // </div>\n    <div className='card-list'>\n        {props.pokemonList.map((pokemon,i) =>  <Card key={ i } pokemon={pokemon}/> )}\n    </div>\n)","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input \n        className=\"search\"\n        type=\"search\" \n        placeholder={placeholder} \n        onChange={handleChange} \n    />\n);","import React, { Component } from 'react';\nimport './App.css';\n\nimport { CardList } from './components/card-list/card-list.component'  \nimport { SearchBox } from './components/search-box/search-box.component'\n\nclass App extends Component {\n  constructor() {\n    super();\n    // If offline application still works\n    // as i have made it fail gracefully\n    this.state = {\n      ninjas:[\n        {\n          name: 'Shia Affaed',\n          id: 1\n        },\n        {\n          name: 'Leroy Jenkins',\n          id: 2\n        },\n        {\n          name: 'Kurtis Weissnax',\n          id: 3\n        },\n        {\n          name: 'Ninja Mcgee',\n          id: 4\n        },\n      ],\n      searchField: '',\n      pokemonList: []\n    }\n    \n  }\n\n  componentDidMount() {\n    let pokeapi = 'https://pokeapi.co/api/v2/pokemon/?offset=0&limit=150'\n    fetch(pokeapi)\n    .then(response => response.json())\n    .then(data => this.setState({pokemonList: data.results}) )\n    // .then(data => {\n    //   console.log(data.results)\n    // })\n\n    let api = 'https://jsonplaceholder.typicode.com/users'\n    fetch(api)\n    .then(response => response.json())\n    .then(users => this.setState({ninjas: users}) )\n  }\n\n  render() {\n    const { pokemonList, searchField} = this.state;\n    // const filterNinjas = ninjas.filter(ninja =>\n    //   ninja.name.toLowerCase().includes(searchField.toLowerCase())\n    // );\n   \n    const filterPokemon = pokemonList.filter(pokemon =>\n      pokemon.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Pokemon</h1>\n        <SearchBox \n          placeholder=\"Kanto Pokemon\"\n          handleChange={ e =>\n            this.setState({searchField: e.target.value})\n          }\n        />\n        <CardList pokemonList={filterPokemon}/>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}